#!/bin/bash


######################################################################
# VARS
######################################################################
IDENTITY_SERVICE="github"
USER_NAME=""
USER_KEY=""
SHOW_IP_ADDRESS=1
LOCAL_IP_ADDRESS="THIS_MACHINE_IP"
LOCAL_SSH_PORT=22
XSSH_ENABLED=0
XSSH_LOCAL_PORT=22
XSSH_REMOTE_PORT=10022
XSSH_REMOTE_USER="root"
XSSH_REMOTE_HOST=""
XSSH_OPEN_FOR=10
TEXT_BOLD=$(tput bold)
TEXT_NORMAL=$(tput sgr0)
PRINT_SSH_COMMAND_OPTIONS=""

######################################################################
# FUNCTIONS
######################################################################
printHelp () {
    echo ""
    echo "Temporarily grant ssh access to friends."
    echo ""
    echo "Usage:"
    echo "    $0 [options] <friendUsername>"
    echo ""
    echo "[options]"
    echo "    -h : Print this help"
    echo "    -i : Identity provider (github*, keybase, id_rsa)"
    echo "    -r : Github identity provider (equivalent to -i id_rsa)"
    echo "    -g : Github identity provider (equivalent to -i github)"
    echo "    -k : Keybase identity provider (equivalent to -i keybase)"
    echo "    -x : SSH forward host"
    echo "    -l : SSH forward user ($XSSH_REMOTE_USER)"
    echo "    -m : SSH forward port ($XSSH_REMOTE_PORT)"
    echo "    -n : SSH forward local port ($XSSH_LOCAL_PORT)"
    echo ""
    echo "<friendUsername>"
    echo "    The friend username which will be granted access (identity provider username)"
    echo ""
}

######################################################################
identityDownloadKeyGithub () {
    USER_KEY=$($CURL_CMD -s https://github.com/$USER_NAME.keys)
    if [[ -z $USER_KEY ]]; then
        echo "User $USER_NAME has no keys on Github"
        exit 5
    fi
    if [[ "$USER_KEY" == "Not Found" ]]; then
        echo "User $USER_NAME not found on Github"
        exit 5
    fi
    echo $USER_KEY
}

######################################################################
identityDownloadKeyKeybase () {
    USER_KEY=$($CURL_CMD -s https://$USER_NAME.keybase.pub/id_rsa.pub)
    if [[ -z $USER_KEY ]]; then
        echo "User $USER_NAME has no key id_rsa.pub on Keybase"
        exit 5
    fi
    if [[ "$USER_KEY" == "Not Found" ]]; then
        echo "User $USER_NAME not found on Keybase"
        exit 5
    fi
    echo $USER_KEY
}

######################################################################
stopCallback () {
    if grep -v "$USER_KEY" $HOME/.ssh/authorized_keys > $HOME/.ssh/tmp; then
        cat $HOME/.ssh/tmp > $HOME/.ssh/authorized_keys && rm $HOME/.ssh/tmp;
    else
        rm $HOME/.ssh/authorized_keys && rm $HOME/.ssh/tmp;
    fi
    if [[ XSSH_ENABLED -eq 1 ]]; then
        pkill -f "ssh -fN -R $XSSH_REMOTE_PORT:localhost:$XSSH_LOCAL_PORT $XSSH_REMOTE_USER@$XSSH_REMOTE_HOST" 2> /dev/null
    fi
}

######################################################################
getIP() {
    echo $($CURL_CMD -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
}

######################################################################
# CLEANUP
######################################################################
trap "stopCallback; exit 0" SIGHUP SIGINT SIGTERM

######################################################################
# TEST DEPS
######################################################################
CURL_CMD=$(which curl 2> /dev/null)
if [[ $? -ne 0 ]]; then
    echo "Error: Command curl not available"
    exit 1
fi

SSH_KEYGEN_CMD=$(which ssh-keygen 2> /dev/null)
if [[ $? -ne 0 ]]; then
    echo "Error: Command ssh-keygen not available"
    exit 1
fi

######################################################################
# PARSE ARGUMENTS
######################################################################
while getopts "hgki:x:l:m:n:r:" o; do
    case "${o}" in
        h)
            printHelp
            exit 0
            ;;
        r)
            IDENTITY_SERVICE="id_rsa"
            RSA_KEY=$OPTARG
            ;;
        g)
            IDENTITY_SERVICE="github"
            ;;
        k)
            IDENTITY_SERVICE="keybase"
            ;;
        i)
            IDENTITY_SERVICE=$OPTARG
            ;;
        x)
            XSSH_ENABLED=1
            XSSH_REMOTE_HOST=$OPTARG
            ;;
        l)
            XSSH_REMOTE_USER=$OPTARG
            ;;
        m)
            XSSH_REMOTE_PORT=$OPTARG
            ;;
        n)
            XSSH_LOCAL_PORT=$OPTARG
            ;;
        *)
            printHelp
            exit 0
            ;;
    esac
done
shift $((OPTIND-1))
USER_NAME=$1

######################################################################
# TEST ARGUMENTS
######################################################################
if [ -z "$USER_NAME" ]; then
    echo "Error: No friend username given"
    printHelp
    exit 4
fi

if [ -z "$IDENTITY_SERVICE" ]; then
    echo "Error: No identity provider given"
    printHelp
    exit 5
fi

######################################################################
# ACQUIRE USER KEY
######################################################################
echo "Fetching $USER_NAME key from service $IDENTITY_SERVICE"

if [ "$IDENTITY_SERVICE" == "github" ]; then
    USER_KEY=$(identityDownloadKeyGithub)
elif [ "$IDENTITY_SERVICE" == "keybase" ]; then
    USER_KEY=$(identityDownloadKeyKeybase)
elif [ "$IDENTITY_SERVICE" == "id_rsa" ]; then
    USER_KEY=$RSA_KEY
else
    echo "Error: Identity provider given is not supported"
    printHelp
    exit 5
fi

TMP_KEY_FILE=/tmp/.sshForFriends.$USER_NAME-$USER-$IDENTITY_SERVICE.keys
echo $USER_KEY > $TMP_KEY_FILE
eval "$SSH_KEYGEN_CMD -l -f $TMP_KEY_FILE > /dev/null"
if [[ $? -ne 0 ]]; then
    echo "Error: Downloaded key is invalid"
    exit 6
fi
rm -f $TMP_KEY_FILE
echo "Key for $USER_NAME from $IDENTITY_SERVICE acquired"

######################################################################
# SETUP SSH FORWARING
######################################################################
if [[ XSSH_ENABLED -eq 1 ]]; then
    LOCAL_IP_ADDRESS=$XSSH_REMOTE_HOST
    LOCAL_SSH_PORT=$XSSH_REMOTE_PORT
    echo "Opening SSH tunnel to $XSSH_REMOTE_USER@$XSSH_REMOTE_HOST:$XSSH_REMOTE_PORT"
    ssh -fN -R $XSSH_REMOTE_PORT:localhost:$XSSH_LOCAL_PORT $XSSH_REMOTE_USER@$XSSH_REMOTE_HOST
    PRINT_SSH_COMMAND_OPTIONS=" -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
    if [[ $? -ne 0 ]]; then
        echo "Error: Can't open SSH tunnel"
        exit 7
    fi
else
    if [[ SHOW_IP_ADDRESS -eq 1 ]]; then
      LOCAL_IP_ADDRESS=$(getIP)
    fi    
fi

######################################################################
# PRINT
######################################################################
echo ""
echo "==> Your friend ${TEXT_BOLD}$USER_NAME${TEXT_NORMAL} is now able to login with : ${TEXT_BOLD}ssh${PRINT_SSH_COMMAND_OPTIONS} $USER@$LOCAL_IP_ADDRESS -p $LOCAL_SSH_PORT${TEXT_NORMAL}"
echo ""
echo "Login authorization will be revoked after this program terminated (press ^C to exit)"

######################################################################
# LAUNCH !!!
######################################################################
mkdir -p $HOME/.ssh/
echo "$USER_KEY" >> $HOME/.ssh/authorized_keys
while true; do sleep 1; done