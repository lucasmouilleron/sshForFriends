#!/bin/bash

######################################################################
# FUNCTIONS
######################################################################
printHelp () {
    echo ""
    echo "Temporarily grant ssh access to friends."
    echo ""
    echo "Usage:"
    echo "    $0 [options] <friendUsername>"
    echo ""
    echo "[options]"
    echo "    -h : Print this help"
    echo "    -g : Github identity provider"
    echo "    -i : Show IP address"
    echo ""
    echo "<friendUsername>"
    echo "    The friend username which will be granted access"
    echo ""
}

######################################################################
identityDownloadKeyGithub () {

    USER_KEY=$($CURL_CMD -s https://github.com/$USER_NAME.keys)

    if [[ -z $USER_KEY ]]; then
        echo "User $USER_NAME has no keys on Github."
        exit 5
    fi

    if [[ "$USER_KEY" == "Not Found" ]]; then
        echo "User $USER_NAME not found on Github."
        exit 5
    fi
    echo $USER_KEY
}

######################################################################
stopCallback () {
    if grep -v "$USER_KEY" $HOME/.ssh/authorized_keys > $HOME/.ssh/tmp; then
        cat $HOME/.ssh/tmp > $HOME/.ssh/authorized_keys && rm $HOME/.ssh/tmp;
    else
        rm $HOME/.ssh/authorized_keys && rm $HOME/.ssh/tmp;
    fi
    # if [[ XSSH_ENABLED -eq 1 ]]; then
        # ssh -S $TMP_SSH_FILE -O exit
    # fi
}

######################################################################
getIP() {
    echo $($CURL_CMD -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
}

######################################################################
# VARS
######################################################################
IDENTITY_GITHUB=0
IDENTITY_SERVICE_NAME=""
USER_NAME=""
USER_KEY=""
SHOW_IP_ADDRESS=0
LOCAL_IP_ADDRESS="THIS_MACHINE_IP"
LOCAL_SSH_PORT=22
XSSH_ENABLED=0
XSSH_LOCAL_PORT=22
XSSH_REMOTE_PORT=10022
XSSH_REMOTE_USER="root"
XSSH_REMOTE_HOST=""
TEXT_BOLD=$(tput bold)
TEXT_NORMAL=$(tput sgr0)

######################################################################
# TEST DEPS
######################################################################
CURL_CMD=$(which curl 2> /dev/null)
if [[ $? -ne 0 ]]; then
    echo "Error: Command curl not available"
    exit 1
fi

SSH_KEYGEN_CMD=$(which ssh-keygen 2> /dev/null)
if [[ $? -ne 0 ]]; then
    echo "Error: Command ssh-keygen not available"
    exit 1
fi

######################################################################
# PARSE ARGUMENTS
######################################################################
while getopts "hgix:l:m:n:" o; do
    case "${o}" in
        h)
            printHelp
            exit 0
            ;;
        g)
            IDENTITY_GITHUB=1
            ;;
        i)
            SHOW_IP_ADDRESS=1
            ;;
        x)
            XSSH_ENABLED=1
            XSSH_REMOTE_HOST=$OPTARG
            ;;
        l)
            XSSH_REMOTE_USER=$OPTARG
            ;;
        m)
            XSSH_REMOTE_PORT=$OPTARG
            ;;
        n)
            XSSH_LOCAL_PORT=$OPTARG
            ;;
        *)
            printHelp
            exit 0
            ;;
    esac
done
shift $((OPTIND-1))
USER_NAME=$1

######################################################################
# TEST ARGUMENTS
######################################################################
if [ -z "$USER_NAME" ]; then
    echo "Error: No friend USER_NAME provided"
    printHelp
    exit 4
fi

if [[ $IDENTITY_GITHUB -eq 1 ]]; then
    IDENTITY_SERVICE_NAME="github"
    USER_KEY=$(identityDownloadKeyGithub)
else
    echo "Error: No identity provider provided"
    printHelp
    exit 5
fi

######################################################################
TMP_KEY_FILE=/tmp/.sshForFriends.$USER_NAME-$USER-$IDENTITY_SERVICE_NAME.keys
echo $USER_KEY > $TMP_KEY_FILE
eval "$SSH_KEYGEN_CMD -l -f $TMP_KEY_FILE > /dev/null"
if [[ $? -ne 0 ]]; then
    echo "Error: Downloaded key is invalid"
    exit 6
fi
rm -f $TMP_KEY_FILE


######################################################################
if [[ XSSH_ENABLED -eq 1 ]]; then
    LOCAL_IP_ADDRESS=$XSSH_REMOTE_HOST
    LOCAL_SSH_PORT=$XSSH_REMOTE_PORT
    TMP_SSH_FILE=/tmp/.sshForFriends.$USER_NAME-$USER-$IDENTITY_SERVICE_NAME.sshFile
    ssh -f $TMP_SSH_FILE -R $XSSH_REMOTE_PORT:localhost:$XSSH_LOCAL_PORT $XSSH_REMOTE_USER@$XSSH_REMOTE_HOST sleep 10
else
    if [[ SHOW_IP_ADDRESS -eq 1 ]]; then
      LOCAL_IP_ADDRESS=$(getIP)
    fi    
fi

######################################################################
echo "Acquired key for user ${TEXT_BOLD}$USER_NAME${TEXT_NORMAL} from ${TEXT_BOLD}$IDENTITY_SERVICE_NAME${TEXT_NORMAL}."
echo "Your friend ${TEXT_BOLD}$USER_NAME${TEXT_NORMAL} is now able to login via ssh using : ${TEXT_BOLD}ssh $USER@$LOCAL_IP_ADDRESS${TEXT_NORMAL} -p $LOCAL_SSH_PORT"
echo ""
echo "Login authorization will stop after this program terminates."
echo "Press ^C to exit."

######################################################################
trap "stopCallback; exit 0" SIGHUP SIGINT SIGTERM
mkdir -p $HOME/.ssh/
echo "$USER_KEY" >> $HOME/.ssh/authorized_keys
sleep infinity &
wait